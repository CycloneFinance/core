;;
;; Header files for Pool
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) impure inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_create_address
slice __tact_create_address(int chain, int hash) inline;

;; __tact_compute_contract_address
slice __tact_compute_contract_address(int chain, cell code, cell data) inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) impure inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; __tact_dict_set_code
cell __tact_dict_set_code(cell dict, int id, cell code) inline;

;; __tact_dict_get_code
cell __tact_dict_get_code(cell dict, int id) inline;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $JettonInternalTransfer$_store
builder $JettonInternalTransfer$_store(builder build_0, (int, int, slice, slice, int, slice) v) inline_ref;

;; $JettonInternalTransfer$_store_cell
cell $JettonInternalTransfer$_store_cell((int, int, slice, slice, int, slice) v) inline;

;; $JettonBurnNotification$_load
(slice, ((int, int, slice, slice))) $JettonBurnNotification$_load(slice sc_0) inline;

;; $JettonMint$_load
(slice, ((slice, slice, int, cell, int, slice))) $JettonMint$_load(slice sc_0) inline_ref;

;; $PoolParams$_store
builder $PoolParams$_store(builder build_0, (int, int, int, int) v) inline;

;; $PoolParams$_load
(slice, ((int, int, int, int))) $PoolParams$_load(slice sc_0) inline;

;; $PayTo$_store
builder $PayTo$_store(builder build_0, (slice, int, slice, int, slice) v) inline;

;; $PayTo$_store_cell
cell $PayTo$_store_cell((slice, int, slice, int, slice) v) inline;

;; $ProvideLiquidity$_load
(slice, ((slice, int, int, int))) $ProvideLiquidity$_load(slice sc_0) inline;

;; $RefundMe$_load
(slice, ((int, int, slice))) $RefundMe$_load(slice sc_0) inline;

;; $SetFees$_load
(slice, ((int, int, slice))) $SetFees$_load(slice sc_0) inline;

;; $Swap$_load
(slice, ((slice, int, slice, slice, int))) $Swap$_load(slice sc_0) inline;

;; $Pool$_store
builder $Pool$_store(builder build_0, (slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int) v) inline;

;; $Pool$_load
(slice, ((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int))) $Pool$_load(slice sc_0) inline;

;; $StateInit$_get_code
_ $StateInit$_get_code((cell, cell) v) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $Context$_get_sender
_ $Context$_get_sender((int, slice, int, slice) v) inline;

;; $JettonData$_to_external
(int, int, slice, cell, cell) $JettonData$_to_external(((int, int, slice, cell, cell)) v) inline;

;; $PoolData$_to_external
(int, int, slice, slice, int, int, slice, int, int) $PoolData$_to_external(((int, int, slice, slice, int, int, slice, int, int)) v) inline;

;; $ExpectedLiquidity$_to_external
(int, int) $ExpectedLiquidity$_to_external(((int, int)) v) inline;

;; $Reserves$_to_external
(int, int) $Reserves$_to_external(((int, int)) v) inline;

;; $ExampleJettonWallet$init$_store
builder $ExampleJettonWallet$init$_store(builder build_0, (slice, slice) v) inline;

;; $Pool$init$_load
(slice, ((slice, int, int, slice, int, int, slice, slice, int, int, int, int, int))) $Pool$init$_load(slice sc_0) inline_ref;

;; $PoolParams$_constructor_initialA_futureA_initialTime_futureTime
((int, int, int, int)) $PoolParams$_constructor_initialA_futureA_initialTime_futureTime(int $initialA, int $futureA, int $initialTime, int $futureTime) inline;

;; $global_emptyCell
cell $global_emptyCell() impure inline;

;; $Pool$_contract_init
(slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int) $Pool$_contract_init(slice $routerAddress, int $lpFee, int $protocolFee, slice $protocolFeesAddress, int $collectedTokenAProtocolFees, int $collectedTokenBProtocolFees, slice $wallet0, slice $wallet1, int $reserve0, int $reserve1, int $total_supply, int $token0PrecisionMultiplier, int $token1PrecisionMultiplier) impure inline_ref;

;; $Pool$_contract_load
(slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int) $Pool$_contract_load() impure inline_ref;

;; $Pool$_contract_store
() $Pool$_contract_store((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int) v) impure inline;

;; $Cell$_fun_asSlice
slice $Cell$_fun_asSlice(cell $self) impure inline;

;; $global_emptySlice
slice $global_emptySlice() impure inline;

;; $global_contractAddress
slice $global_contractAddress((cell, cell) $s) impure inline;

;; $global_send
int $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $ExampleJettonWallet$_init_child
(cell, cell) $ExampleJettonWallet$_init_child(cell sys', slice $owner, slice $jetton_master) inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline;

;; $SendParameters$_constructor_to_value_bounce_mode_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_mode_body(slice $to, int $value, int $bounce, int $mode, cell $body) inline;

;; $SendParameters$_constructor_to_value_bounce_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_mode_body_code_data(slice $to, int $value, int $bounce, int $mode, cell $body, cell $code, cell $data) inline;

;; $JettonInternalTransfer$_constructor_query_id_amount_response_address_from_forward_ton_amount_forward_payload
((int, int, slice, slice, int, slice)) $JettonInternalTransfer$_constructor_query_id_amount_response_address_from_forward_ton_amount_forward_payload(int $query_id, int $amount, slice $response_address, slice $from, int $forward_ton_amount, slice $forward_payload) inline;

;; $JettonMint$_constructor_origin_receiver_amount_custom_payload_forward_ton_amount_forward_payload
((slice, slice, int, cell, int, slice)) $JettonMint$_constructor_origin_receiver_amount_custom_payload_forward_ton_amount_forward_payload(slice $origin, slice $receiver, int $amount, cell $custom_payload, int $forward_ton_amount, slice $forward_payload) inline;

;; $Pool$_fun__mint_validate
((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int), ()) $Pool$_fun__mint_validate((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int) $self, (int, slice, int, slice) $ctx, (slice, slice, int, cell, int, slice) $msg) impure inline;

;; $Pool$_fun_calculate_jetton_wallet_init
((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int), (cell, cell)) $Pool$_fun_calculate_jetton_wallet_init((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int) $self, slice $owner_address) impure inline;

;; $Pool$_fun__mint
((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int), ()) $Pool$_fun__mint((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int) $self, (int, slice, int, slice) $ctx, (slice, slice, int, cell, int, slice) $msg) impure inline;

;; $Pool$_fun__mint_lp
((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int), ()) $Pool$_fun__mint_lp((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int) $self, slice $to, int $amount) impure inline_ref;

;; $Pool$_fun_within1
((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int), int) $Pool$_fun_within1((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int) $self, int $a, int $b) impure inline_ref;

;; $Pool$_fun_computeDFromAdjustedBalances
((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int), int) $Pool$_fun_computeDFromAdjustedBalances((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int) $self, int $a, int $xp0, int $xp1) impure inline_ref;

;; $Pool$_fun__computeInvariant
((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int), int) $Pool$_fun__computeInvariant((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int) $self, int $_a, int $_reserve0, int $_reserve1) impure inline_ref;

;; $Pool$_fun_getA
((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int), int) $Pool$_fun_getA((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int) $self, (int, int, int, int) $params) impure inline_ref;

;; $PayTo$_constructor_owner_tokenAAmount_walletTokenAAddress_tokenBAmount_walletTokenBAddress
((slice, int, slice, int, slice)) $PayTo$_constructor_owner_tokenAAmount_walletTokenAAddress_tokenBAmount_walletTokenBAddress(slice $owner, int $tokenAAmount, slice $walletTokenAAddress, int $tokenBAmount, slice $walletTokenBAddress) inline;

;; $Pool$_fun_send_message_nobounce
((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int), ()) $Pool$_fun_send_message_nobounce((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int) $self, int $_value, slice $_to, cell $_body, int $_mode) impure inline_ref;

;; $Pool$_fun_call_pay_to
((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int), ()) $Pool$_fun_call_pay_to((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int) $self, int $amount, int $mode, slice $to_address, int $amount0_out, int $amount1_out) impure inline_ref;

;; $Pool$_fun_burn_notification_hook
((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int), ()) $Pool$_fun_burn_notification_hook((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int) $self, (int, slice, int, slice) $ctx, (int, int, slice, slice) $msg) impure inline;

;; $PoolData$_constructor_reserve0_reserve1_token0Address_token1Address_lpFee_protocolFee_protocolFeeAddress_collectedToken0ProtocolFee_collectedToken1ProtocolFee
((int, int, slice, slice, int, int, slice, int, int)) $PoolData$_constructor_reserve0_reserve1_token0Address_token1Address_lpFee_protocolFee_protocolFeeAddress_collectedToken0ProtocolFee_collectedToken1ProtocolFee(int $reserve0, int $reserve1, slice $token0Address, slice $token1Address, int $lpFee, int $protocolFee, slice $protocolFeeAddress, int $collectedToken0ProtocolFee, int $collectedToken1ProtocolFee) inline;

;; $Pool$_fun_get_pool_data
((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int), (int, int, slice, slice, int, int, slice, int, int)) $Pool$_fun_get_pool_data((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int) $self) impure inline_ref;

;; $Pool$_fun_getSwapFee
((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int), int) $Pool$_fun_getSwapFee((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int) $self, slice $sender, slice $tokenIn, slice $tokenOut, slice $data) impure inline_ref;

;; $Pool$_fun__getSwapFee
((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int), int) $Pool$_fun__getSwapFee((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int) $self, slice $sender, slice $tokenIn, slice $tokenOut) impure inline_ref;

;; $Pool$_fun_getAmountOut
((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int), int) $Pool$_fun_getAmountOut((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int) $self, slice $tokenIn, slice $sender, int $amountIn) impure inline_ref;

;; $Pool$_fun_getTokenOut
((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int), int) $Pool$_fun_getTokenOut((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int) $self, int $amount0, int $amount1) impure inline_ref;

;; $ExpectedLiquidity$_constructor_amount0_amount1
((int, int)) $ExpectedLiquidity$_constructor_amount0_amount1(int $amount0, int $amount1) inline;

;; $Pool$_fun_get_expected_liquidity
((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int), (int, int)) $Pool$_fun_get_expected_liquidity((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int) $self, int $amount) impure inline_ref;

;; $Pool$_fun_get_reserve0
((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int), int) $Pool$_fun_get_reserve0((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int) $self) impure inline_ref;

;; $Pool$_fun_get_reserve1
((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int), int) $Pool$_fun_get_reserve1((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int) $self) impure inline_ref;

;; $Reserves$_constructor_reserve0_reserve1
((int, int)) $Reserves$_constructor_reserve0_reserve1(int $reserve0, int $reserve1) inline;

;; $Pool$_fun_getReserves
((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int), (int, int)) $Pool$_fun_getReserves((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int) $self) impure inline_ref;

;; $Pool$_fun_getter_A
((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int), int) $Pool$_fun_getter_A((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int) $self) impure inline_ref;

;; $Pool$_fun_getter_oldInvariant
((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int), int) $Pool$_fun_getter_oldInvariant((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int) $self) impure inline_ref;

;; $Pool$_fun_getter_newInvariant
((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int), int) $Pool$_fun_getter_newInvariant((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int) $self, int $amount0, int $amount1) impure inline_ref;

;; $Pool$_fun_getter_computeDFromAdjustedBalances
((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int), int) $Pool$_fun_getter_computeDFromAdjustedBalances((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int) $self, int $xp0, int $xp1) impure inline_ref;

;; $Pool$_fun_getter_ADD_NONE
((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int), slice) $Pool$_fun_getter_ADD_NONE((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int) $self) impure inline_ref;

;; $Pool$_fun_forward
((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int), ()) $Pool$_fun_forward((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $Pool$_fun_notify
((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int), ()) $Pool$_fun_notify((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int) $self, cell $body) impure inline;

;; $Pool$_fun_send_empty_message
((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int), ()) $Pool$_fun_send_empty_message((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int) $self, int $_value, slice $_to, int $_mode) impure inline_ref;

;; $AmountOut$_constructor_amountOut_feeIn
((int, int)) $AmountOut$_constructor_amountOut_feeIn(int $amountOut, int $feeIn) inline;

;; $Pool$_fun_getY
((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int), int) $Pool$_fun_getY((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int) $self, int $a, int $x, int $d) impure inline_ref;

;; $Pool$_fun__getAmountOut
((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int), (int, int)) $Pool$_fun__getAmountOut((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int) $self, int $a, int $swapFee, int $amountIn, int $reserve0, int $reserve1, int $token0In) impure inline_ref;

;; $Pool$_fun__burn_notification_validate
((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int), ()) $Pool$_fun__burn_notification_validate((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int) $self, (int, slice, int, slice) $ctx, (int, int, slice, slice) $msg) impure inline;

;; $SendParameters$_constructor_to_value_bounce_mode
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_mode(slice $to, int $value, int $bounce, int $mode) inline;

;; $Pool$_fun__burn_notification
((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int), ()) $Pool$_fun__burn_notification((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int) $self, (int, slice, int, slice) $ctx, (int, int, slice, slice) $msg) impure inline;

;; $JettonData$_constructor_total_supply_mintable_admin_address_jetton_content_jetton_wallet_code
((int, int, slice, cell, cell)) $JettonData$_constructor_total_supply_mintable_admin_address_jetton_content_jetton_wallet_code(int $total_supply, int $mintable, slice $admin_address, cell $jetton_content, cell $jetton_wallet_code) inline;

;; $Pool$_fun_get_jetton_data
((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int), (int, int, slice, cell, cell)) $Pool$_fun_get_jetton_data((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int) $self) impure inline_ref;

;; $Pool$_fun_get_wallet_address
((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int), slice) $Pool$_fun_get_wallet_address((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int) $self, slice $owner_address) impure inline_ref;

;; $Pool$_fun_get_test
((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int), int) $Pool$_fun_get_test((slice, int, int, slice, int, int, slice, slice, int, int, int, int, (int, int, int, int), int, int, slice, cell, int) $self) impure inline_ref;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int $queryId) inline;
