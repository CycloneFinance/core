;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: Context
;; TLB: _ bounced:bool sender:address value:int257 raw:^slice = Context
;;

_ $Context$_get_sender((int, slice, int, slice) v) inline {
    var (v'bounced, v'sender, v'value, v'raw) = v;
    return v'sender;
}

_ $Context$_get_value((int, slice, int, slice) v) inline {
    var (v'bounced, v'sender, v'value, v'raw) = v;
    return v'value;
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline {
    return ($bounce, $to, $value, $mode, $body, $code, $data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_mode_body(slice $to, int $value, int $bounce, int $mode, cell $body) inline {
    return ($bounce, $to, $value, $mode, $body, null(), null());
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_mode_body_code_data(slice $to, int $value, int $bounce, int $mode, cell $body, cell $code, cell $data) inline {
    return ($bounce, $to, $value, $mode, $body, $code, $data);
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int $queryId) inline {
    return ($queryId);
}

;;
;; Type: RouterData
;; TLB: _ isLocked:bool adminAddress:address = RouterData
;;

(int, slice) $RouterData$_to_external(((int, slice)) v) inline {
    var (v'isLocked, v'adminAddress) = v; 
    return (v'isLocked, v'adminAddress);
}

((int, slice)) $RouterData$_constructor_isLocked_adminAddress(int $isLocked, slice $adminAddress) inline {
    return ($isLocked, $adminAddress);
}

;;
;; Type: PoolState
;; TLB: _ init:StateInit{code:^cell,data:^cell} pool_address:address = PoolState
;;

(((cell, cell), slice)) $PoolState$_constructor_init_pool_address((cell, cell) $init, slice $pool_address) inline {
    return ($init, $pool_address);
}

;;
;; Type: CollectFees
;; Header: 0x8d1ee421
;; TLB: collect_fees#8d1ee421 token0:address token1:address = CollectFees
;;

(slice, ((slice, slice))) $CollectFees$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2367611937);
    var v'token0 = sc_0~__tact_load_address();
    var v'token1 = sc_0~__tact_load_address();
    return (sc_0, (v'token0, v'token1));
}

;;
;; Type: UpdateAdmin
;; Header: 0x8849896b
;; TLB: update_admin#8849896b newAdmin:address = UpdateAdmin
;;

(slice, ((slice))) $UpdateAdmin$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2286520683);
    var v'newAdmin = sc_0~__tact_load_address();
    return (sc_0, (v'newAdmin));
}

;;
;; Type: JettonTransfer
;; Header: 0x0f8a7ea5
;; TLB: jetton_transfer#0f8a7ea5 query_id:uint64 amount:coins destination:address response_destination:address custom_payload:Maybe ^cell forward_ton_amount:coins forward_payload:remainder<slice> = JettonTransfer
;;

builder $JettonTransfer$_store(builder build_0, (int, int, slice, slice, cell, int, slice) v) inline_ref {
    var (v'query_id, v'amount, v'destination, v'response_destination, v'custom_payload, v'forward_ton_amount, v'forward_payload) = v;
    build_0 = store_uint(build_0, 260734629, 32);
    build_0 = build_0.store_uint(v'query_id, 64);
    build_0 = build_0.store_coins(v'amount);
    build_0 = __tact_store_address(build_0, v'destination);
    build_0 = __tact_store_address(build_0, v'response_destination);
    build_0 = ~ null?(v'custom_payload) ? build_0.store_int(true, 1).store_ref(v'custom_payload) : build_0.store_int(false, 1);
    build_0 = build_0.store_coins(v'forward_ton_amount);
    build_0 = build_0.store_slice(v'forward_payload);
    return build_0;
}

cell $JettonTransfer$_store_cell((int, int, slice, slice, cell, int, slice) v) inline {
    return $JettonTransfer$_store(begin_cell(), v).end_cell();
}

((int, int, slice, slice, cell, int, slice)) $JettonTransfer$_constructor_query_id_amount_destination_response_destination_custom_payload_forward_ton_amount_forward_payload(int $query_id, int $amount, slice $destination, slice $response_destination, cell $custom_payload, int $forward_ton_amount, slice $forward_payload) inline {
    return ($query_id, $amount, $destination, $response_destination, $custom_payload, $forward_ton_amount, $forward_payload);
}

;;
;; Type: JettonTransferNotification
;; Header: 0x7362d09c
;; TLB: jetton_transfer_notification#7362d09c query_id:uint64 amount:coins sender:address forward_payload:remainder<slice> = JettonTransferNotification
;;

(slice, ((int, int, slice, slice))) $JettonTransferNotification$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1935855772);
    var v'query_id = sc_0~load_uint(64);
    var v'amount = sc_0~load_coins();
    var v'sender = sc_0~__tact_load_address();
    var v'forward_payload = sc_0;
    return (sc_0, (v'query_id, v'amount, v'sender, v'forward_payload));
}

;;
;; Type: PayTo
;; Header: 0x8325768e
;; TLB: pay_to#8325768e owner:address tokenAAmount:coins walletTokenAAddress:address tokenBAmount:coins walletTokenBAddress:address remainRef:^slice = PayTo
;;

(slice, ((slice, int, slice, int, slice, slice))) $PayTo$_load(slice sc_0) inline_ref {
    throw_unless(129, sc_0~load_uint(32) == 2200270478);
    var v'owner = sc_0~__tact_load_address();
    var v'tokenAAmount = sc_0~load_coins();
    var v'walletTokenAAddress = sc_0~__tact_load_address();
    var v'tokenBAmount = sc_0~load_coins();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'walletTokenBAddress = sc_1~__tact_load_address();
    var v'remainRef = sc_1~load_ref().begin_parse();
    return (sc_0, (v'owner, v'tokenAAmount, v'walletTokenAAddress, v'tokenBAmount, v'walletTokenBAddress, v'remainRef));
}

;;
;; Type: ProvideLiquidity
;; Header: 0x355a3065
;; TLB: provide_liquidity#355a3065 fromAddress:address jettonAmount0:coins jettonAmount1:coins minLPOut:coins = ProvideLiquidity
;;

builder $ProvideLiquidity$_store(builder build_0, (slice, int, int, int) v) inline {
    var (v'fromAddress, v'jettonAmount0, v'jettonAmount1, v'minLPOut) = v;
    build_0 = store_uint(build_0, 895103077, 32);
    build_0 = __tact_store_address(build_0, v'fromAddress);
    build_0 = build_0.store_coins(v'jettonAmount0);
    build_0 = build_0.store_coins(v'jettonAmount1);
    build_0 = build_0.store_coins(v'minLPOut);
    return build_0;
}

cell $ProvideLiquidity$_store_cell((slice, int, int, int) v) inline {
    return $ProvideLiquidity$_store(begin_cell(), v).end_cell();
}

(slice, ((slice, int, int, int))) $ProvideLiquidity$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 895103077);
    var v'fromAddress = sc_0~__tact_load_address();
    var v'jettonAmount0 = sc_0~load_coins();
    var v'jettonAmount1 = sc_0~load_coins();
    var v'minLPOut = sc_0~load_coins();
    return (sc_0, (v'fromAddress, v'jettonAmount0, v'jettonAmount1, v'minLPOut));
}

tuple $ProvideLiquidity$_as_optional((slice, int, int, int) v) inline {
    var (v'fromAddress, v'jettonAmount0, v'jettonAmount1, v'minLPOut) = v;
    return __tact_tuple_create_4(v'fromAddress, v'jettonAmount0, v'jettonAmount1, v'minLPOut);
}

tuple $ProvideLiquidity$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $ProvideLiquidity$_as_optional(sc~$ProvideLiquidity$_load());
}

((slice, int, int, int)) $ProvideLiquidity$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (slice vvv'fromAddress, int vvv'jettonAmount0, int vvv'jettonAmount1, int vvv'minLPOut) = __tact_tuple_destroy_4(v);
    return (vvv'fromAddress, vvv'jettonAmount0, vvv'jettonAmount1, vvv'minLPOut);
}

(slice, int, int, int) $ProvideLiquidity$_to_external(((slice, int, int, int)) v) inline {
    var (v'fromAddress, v'jettonAmount0, v'jettonAmount1, v'minLPOut) = v; 
    return (v'fromAddress, v'jettonAmount0, v'jettonAmount1, v'minLPOut);
}

((slice, int, int, int)) $ProvideLiquidity$_constructor_fromAddress_jettonAmount0_jettonAmount1_minLPOut(slice $fromAddress, int $jettonAmount0, int $jettonAmount1, int $minLPOut) inline {
    return ($fromAddress, $jettonAmount0, $jettonAmount1, $minLPOut);
}

;;
;; Type: Swap
;; Header: 0x0cb8a416
;; TLB: swap#0cb8a416 fromAddress:address jettonAmount:coins tokenWallet:address toAddress:address minOutput:coins remainRef:^slice = Swap
;;

builder $Swap$_store(builder build_0, (slice, int, slice, slice, int, slice) v) inline_ref {
    var (v'fromAddress, v'jettonAmount, v'tokenWallet, v'toAddress, v'minOutput, v'remainRef) = v;
    build_0 = store_uint(build_0, 213427222, 32);
    build_0 = __tact_store_address(build_0, v'fromAddress);
    build_0 = build_0.store_coins(v'jettonAmount);
    build_0 = __tact_store_address(build_0, v'tokenWallet);
    build_0 = __tact_store_address(build_0, v'toAddress);
    var build_1 = begin_cell();
    build_1 = build_1.store_coins(v'minOutput);
    build_1 = build_1.store_ref(begin_cell().store_slice(v'remainRef).end_cell());
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

cell $Swap$_store_cell((slice, int, slice, slice, int, slice) v) inline {
    return $Swap$_store(begin_cell(), v).end_cell();
}

((slice, int, slice, slice, int, slice)) $Swap$_constructor_fromAddress_jettonAmount_tokenWallet_toAddress_minOutput_remainRef(slice $fromAddress, int $jettonAmount, slice $tokenWallet, slice $toAddress, int $minOutput, slice $remainRef) inline {
    return ($fromAddress, $jettonAmount, $tokenWallet, $toAddress, $minOutput, $remainRef);
}

;;
;; Type: Reback
;; Header: 0x2b5ddb86
;; TLB: reback#2b5ddb86 to:address = Reback
;;

(slice, ((slice))) $Reback$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 727571334);
    var v'to = sc_0~__tact_load_address();
    return (sc_0, (v'to));
}

;;
;; Type: Pool
;;

builder $Pool$init$_store(builder build_0, (slice, int, int, slice, int, int, slice, slice, int, int, int, int, int) v) inline {
    var (v'routerAddress, v'lpFee, v'protocolFee, v'protocolFeesAddress, v'collectedTokenAProtocolFees, v'collectedTokenBProtocolFees, v'wallet0, v'wallet1, v'reserve0, v'reserve1, v'total_supply, v'token0PrecisionMultiplier, v'token1PrecisionMultiplier) = v;
    build_0 = __tact_store_address(build_0, v'routerAddress);
    build_0 = build_0.store_int(v'lpFee, 257);
    build_0 = build_0.store_int(v'protocolFee, 257);
    var build_1 = begin_cell();
    build_1 = __tact_store_address(build_1, v'protocolFeesAddress);
    build_1 = build_1.store_int(v'collectedTokenAProtocolFees, 257);
    build_1 = build_1.store_int(v'collectedTokenBProtocolFees, 257);
    var build_2 = begin_cell();
    build_2 = __tact_store_address(build_2, v'wallet0);
    build_2 = __tact_store_address(build_2, v'wallet1);
    build_2 = build_2.store_int(v'reserve0, 257);
    var build_3 = begin_cell();
    build_3 = build_3.store_int(v'reserve1, 257);
    build_3 = build_3.store_int(v'total_supply, 257);
    build_3 = build_3.store_int(v'token0PrecisionMultiplier, 257);
    var build_4 = begin_cell();
    build_4 = build_4.store_int(v'token1PrecisionMultiplier, 257);
    build_3 = store_ref(build_3, build_4.end_cell());
    build_2 = store_ref(build_2, build_3.end_cell());
    build_1 = store_ref(build_1, build_2.end_cell());
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(cell, cell) $Pool$_init_child(cell sys', slice $routerAddress, int $lpFee, int $protocolFee, slice $protocolFeesAddress, int $collectedTokenAProtocolFees, int $collectedTokenBProtocolFees, slice $wallet0, slice $wallet1, int $reserve0, int $reserve1, int $total_supply, int $token0PrecisionMultiplier, int $token1PrecisionMultiplier) inline_ref {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: Pool
    cell mine = __tact_dict_get_code(source, 29791);
    contracts = __tact_dict_set_code(contracts, 29791, mine);
    
    ;; Contract Code: ExampleJettonWallet
    cell code_40421 = __tact_dict_get_code(source, 40421);
    contracts = __tact_dict_set_code(contracts, 40421, code_40421);
    
    ;; Build cell
    builder b = begin_cell();
    b = b.store_ref(begin_cell().store_dict(contracts).end_cell());
    b = b.store_int(false, 1);
    b = $Pool$init$_store(b, ($routerAddress, $lpFee, $protocolFee, $protocolFeesAddress, $collectedTokenAProtocolFees, $collectedTokenBProtocolFees, $wallet0, $wallet1, $reserve0, $reserve1, $total_supply, $token0PrecisionMultiplier, $token1PrecisionMultiplier));
    return (mine, b.end_cell());
}

;;
;; Type: Router
;;

builder $Router$_store(builder build_0, (int, slice, cell, int) v) inline {
    var (v'isLocked, v'adminAddress, v'lp_data, v'test) = v;
    build_0 = build_0.store_int(v'isLocked, 1);
    build_0 = __tact_store_address(build_0, v'adminAddress);
    build_0 = build_0.store_dict(v'lp_data);
    build_0 = build_0.store_int(v'test, 1);
    return build_0;
}

(slice, ((int, slice, cell, int))) $Router$_load(slice sc_0) inline {
    var v'isLocked = sc_0~load_int(1);
    var v'adminAddress = sc_0~__tact_load_address();
    var v'lp_data = sc_0~load_dict();
    var v'test = sc_0~load_int(1);
    return (sc_0, (v'isLocked, v'adminAddress, v'lp_data, v'test));
}

(slice, ((slice))) $Router$init$_load(slice sc_0) inline {
    var v'admin = sc_0~__tact_load_address();
    return (sc_0, (v'admin));
}

(int, slice, cell, int) $Router$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$Router$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (slice $admin) = $sc~$Router$init$_load();
        $sc.end_parse();
        return $Router$_contract_init($admin);
    }
}

() $Router$_contract_store((int, slice, cell, int) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $Router$_store(b, v);
    set_data(b.end_cell());
}