;;
;; Header files for Router
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) impure inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_create_address
slice __tact_create_address(int chain, int hash) inline;

;; __tact_compute_contract_address
slice __tact_compute_contract_address(int chain, cell code, cell data) inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) impure inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_dict_set_slice_cell
(cell, ()) __tact_dict_set_slice_cell(cell d, int kl, slice k, cell v) inline;

;; __tact_dict_get_slice_cell
cell __tact_dict_get_slice_cell(cell d, int kl, slice k) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; __tact_dict_set_code
cell __tact_dict_set_code(cell dict, int id, cell code) inline;

;; __tact_dict_get_code
cell __tact_dict_get_code(cell dict, int id) inline;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $CollectFees$_load
(slice, ((slice, slice))) $CollectFees$_load(slice sc_0) inline;

;; $UpdateAdmin$_load
(slice, ((slice))) $UpdateAdmin$_load(slice sc_0) inline;

;; $JettonTransfer$_store
builder $JettonTransfer$_store(builder build_0, (int, int, slice, slice, cell, int, slice) v) inline_ref;

;; $JettonTransfer$_store_cell
cell $JettonTransfer$_store_cell((int, int, slice, slice, cell, int, slice) v) inline;

;; $JettonTransferNotification$_load
(slice, ((int, int, slice, slice))) $JettonTransferNotification$_load(slice sc_0) inline;

;; $PayTo$_load
(slice, ((slice, int, slice, int, slice, slice))) $PayTo$_load(slice sc_0) inline_ref;

;; $ProvideLiquidity$_store
builder $ProvideLiquidity$_store(builder build_0, (slice, int, int, int) v) inline;

;; $ProvideLiquidity$_store_cell
cell $ProvideLiquidity$_store_cell((slice, int, int, int) v) inline;

;; $ProvideLiquidity$_load
(slice, ((slice, int, int, int))) $ProvideLiquidity$_load(slice sc_0) inline;

;; $ProvideLiquidity$_as_optional
tuple $ProvideLiquidity$_as_optional((slice, int, int, int) v) inline;

;; $ProvideLiquidity$_load_opt
tuple $ProvideLiquidity$_load_opt(cell cl) inline;

;; $Swap$_store
builder $Swap$_store(builder build_0, (slice, int, slice, slice, int, slice) v) inline_ref;

;; $Swap$_store_cell
cell $Swap$_store_cell((slice, int, slice, slice, int, slice) v) inline;

;; $Reback$_load
(slice, ((slice))) $Reback$_load(slice sc_0) inline;

;; $Router$_store
builder $Router$_store(builder build_0, (int, slice, cell, int) v) inline;

;; $Router$_load
(slice, ((int, slice, cell, int))) $Router$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $Context$_get_sender
_ $Context$_get_sender((int, slice, int, slice) v) inline;

;; $Context$_get_value
_ $Context$_get_value((int, slice, int, slice) v) inline;

;; $RouterData$_to_external
(int, slice) $RouterData$_to_external(((int, slice)) v) inline;

;; $ProvideLiquidity$_not_null
((slice, int, int, int)) $ProvideLiquidity$_not_null(tuple v) inline;

;; $ProvideLiquidity$_to_external
(slice, int, int, int) $ProvideLiquidity$_to_external(((slice, int, int, int)) v) inline;

;; $Pool$init$_store
builder $Pool$init$_store(builder build_0, (slice, int, int, slice, int, int, slice, slice, int, int, int, int, int) v) inline;

;; $Router$init$_load
(slice, ((slice))) $Router$init$_load(slice sc_0) inline;

;; $Router$_contract_init
(int, slice, cell, int) $Router$_contract_init(slice $admin) impure inline_ref;

;; $Router$_contract_load
(int, slice, cell, int) $Router$_contract_load() impure inline_ref;

;; $Router$_contract_store
() $Router$_contract_store((int, slice, cell, int) v) impure inline;

;; $global_emptyCell
cell $global_emptyCell() impure inline;

;; $Cell$_fun_asSlice
slice $Cell$_fun_asSlice(cell $self) impure inline;

;; $global_emptySlice
slice $global_emptySlice() impure inline;

;; $global_contractAddress
slice $global_contractAddress((cell, cell) $s) impure inline;

;; $global_send
int $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $Pool$_init_child
(cell, cell) $Pool$_init_child(cell sys', slice $routerAddress, int $lpFee, int $protocolFee, slice $protocolFeesAddress, int $collectedTokenAProtocolFees, int $collectedTokenBProtocolFees, slice $wallet0, slice $wallet1, int $reserve0, int $reserve1, int $total_supply, int $token0PrecisionMultiplier, int $token1PrecisionMultiplier) inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline;

;; $SendParameters$_constructor_to_value_bounce_mode_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_mode_body(slice $to, int $value, int $bounce, int $mode, cell $body) inline;

;; $SendParameters$_constructor_to_value_bounce_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_mode_body_code_data(slice $to, int $value, int $bounce, int $mode, cell $body, cell $code, cell $data) inline;

;; $Swap$_constructor_fromAddress_jettonAmount_tokenWallet_toAddress_minOutput_remainRef
((slice, int, slice, slice, int, slice)) $Swap$_constructor_fromAddress_jettonAmount_tokenWallet_toAddress_minOutput_remainRef(slice $fromAddress, int $jettonAmount, slice $tokenWallet, slice $toAddress, int $minOutput, slice $remainRef) inline;

;; $Router$_fun_send_simple_message
((int, slice, cell, int), ()) $Router$_fun_send_simple_message((int, slice, cell, int) $self, int $_value, slice $_to, cell $_body, int $_mode) impure inline_ref;

;; $Router$_fun__swap
((int, slice, cell, int), ()) $Router$_fun__swap((int, slice, cell, int) $self, slice $token_walletIn, slice $from_user, int $jetton_amount, int $min_out, slice $to_address, slice $pool_address, slice $ref_ds) impure inline_ref;

;; $Router$_fun_require_admin
((int, slice, cell, int), ()) $Router$_fun_require_admin((int, slice, cell, int) $self) impure inline_ref;

;; $PoolState$_constructor_init_pool_address
(((cell, cell), slice)) $PoolState$_constructor_init_pool_address((cell, cell) $init, slice $pool_address) inline;

;; $Router$_fun_get_pool_state_init_and_address
((int, slice, cell, int), ((cell, cell), slice)) $Router$_fun_get_pool_state_init_and_address((int, slice, cell, int) $self, slice $token0_address, slice $token1_address, int $token0PrecisionMultiplier, int $token1PrecisionMultiplier) impure inline_ref;

;; $Router$_fun_isLocked
((int, slice, cell, int), int) $Router$_fun_isLocked((int, slice, cell, int) $self) impure inline_ref;

;; $Router$_fun_getter_pool_address
((int, slice, cell, int), slice) $Router$_fun_getter_pool_address((int, slice, cell, int) $self, slice $token0_address, slice $token1_address, int $token0PrecisionMultiplier, int $token1PrecisionMultiplier) impure inline_ref;

;; $Router$_fun_getter_pool_address_noPrecision
((int, slice, cell, int), slice) $Router$_fun_getter_pool_address_noPrecision((int, slice, cell, int) $self, slice $token0_address, slice $token1_address) impure inline_ref;

;; $RouterData$_constructor_isLocked_adminAddress
((int, slice)) $RouterData$_constructor_isLocked_adminAddress(int $isLocked, slice $adminAddress) inline;

;; $Router$_fun_get_router_data
((int, slice, cell, int), (int, slice)) $Router$_fun_get_router_data((int, slice, cell, int) $self) impure inline_ref;

;; $Router$_fun_getter_lp_data
((int, slice, cell, int), (slice, int, int, int)) $Router$_fun_getter_lp_data((int, slice, cell, int) $self, slice $from_user) impure inline_ref;

;; $Router$_fun_forward
((int, slice, cell, int), ()) $Router$_fun_forward((int, slice, cell, int) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $Router$_fun_notify
((int, slice, cell, int), ()) $Router$_fun_notify((int, slice, cell, int) $self, cell $body) impure inline;

;; $JettonTransfer$_constructor_query_id_amount_destination_response_destination_custom_payload_forward_ton_amount_forward_payload
((int, int, slice, slice, cell, int, slice)) $JettonTransfer$_constructor_query_id_amount_destination_response_destination_custom_payload_forward_ton_amount_forward_payload(int $query_id, int $amount, slice $destination, slice $response_destination, cell $custom_payload, int $forward_ton_amount, slice $forward_payload) inline;

;; $Router$_fun_create_simple_transfer_body
((int, slice, cell, int), (int, int, slice, slice, cell, int, slice)) $Router$_fun_create_simple_transfer_body((int, slice, cell, int) $self, int $query_id, int $fwd_amount, int $jetton_amount, slice $to) impure inline_ref;

;; $Router$_fun_get_ADD_NONE
((int, slice, cell, int), slice) $Router$_fun_get_ADD_NONE((int, slice, cell, int) $self) impure inline_ref;

;; $Router$_fun_send_empty_message
((int, slice, cell, int), ()) $Router$_fun_send_empty_message((int, slice, cell, int) $self, int $_value, slice $_to, int $_mode) impure inline_ref;

;; $Router$_fun_send_message_with_stateinit
((int, slice, cell, int), ()) $Router$_fun_send_message_with_stateinit((int, slice, cell, int) $self, int $_value, slice $_to, cell $_body, (cell, cell) $_stateInit, int $_mode) impure inline_ref;

;; $Router$_fun_get_test
((int, slice, cell, int), int) $Router$_fun_get_test((int, slice, cell, int) $self) impure inline_ref;

;; $ProvideLiquidity$_constructor_fromAddress_jettonAmount0_jettonAmount1_minLPOut
((slice, int, int, int)) $ProvideLiquidity$_constructor_fromAddress_jettonAmount0_jettonAmount1_minLPOut(slice $fromAddress, int $jettonAmount0, int $jettonAmount1, int $minLPOut) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int $queryId) inline;
